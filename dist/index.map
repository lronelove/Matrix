{"version":3,"sources":["matrix.js"],"names":["global","factory","exports","module","define","amd","self","Matrix","row","col","num","data","Array","i","fillWith","prototype","print","console","log","set","value","changeRow","row1","row2","cur","changeCol","len","length","j","len1","addRows","count","array","push","addCol","removeRow","index","splice","removeCol","find","target","len2","findAll","pos","countFor","fillBlock","col1","col2","moveToRight","steps","end","pop","moveToTop","start","shift","animate","right","top","get","blockAnimate","minRow","Math","min","maxRow","max","minCol","childRow","childCol","childMatrix","matrix","render","selector","dom","document","querySelector","html","cols","innerHTML"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":[";(function (global, factory) {\r\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n        typeof define === 'function' && define.amd ? define(factory) :\r\n            (global = global || self, global.Matrix = factory());\r\n})(this, function () {\r\n    //这是一个测试 test ok\r\n    function Matrix (row, col, num = 0) {\r\n        this.col = col; // 列数\r\n        this.row = row; // 行数\r\n\r\n        // 创建一个col列，row行的数组\r\n        this.data = new Array(this.row);\r\n\r\n        for(let i = 0; i < this.row; i++) {\r\n            this.data[i] = new Array(this.col);\r\n        }\r\n        this.fillWith(num);\r\n    }\r\n\r\n//打印的方法 test ok\r\n    Matrix.prototype.print = function () {\r\n        console.log(this.data);\r\n        return this.data;\r\n    };\r\n\r\n//设置第col列，row行的数据 test ok\r\n    Matrix.prototype.set = function (row, col, value) {\r\n        this.data[row - 1][[col - 1]] = value;\r\n        return this.data;\r\n    };\r\n\r\n//交换两行 test ok\r\n    Matrix.prototype.changeRow = function (row1, row2) {\r\n        let cur = this.data[row1 - 1];\r\n        this.data[row1 - 1] = this.data[row2 - 1];\r\n        this.data[row2 - 1] = cur;\r\n        return this.data;\r\n    };\r\n\r\n//交换两列 test ok\r\n    Matrix.prototype.changeCol = function (row1,row2) {\r\n        for(let i = 0,len = this.row; i < len; i++) {\r\n            let cur = this.data[i][row1 - 1];\r\n            this.data[i][row1 - 1] = this.data[i][row2 - 1];\r\n            this.data[i][row2 - 1] = cur;\r\n        }\r\n        return this.data;\r\n    };\r\n\r\n//把矩阵用某个数填充满 test ok\r\n    Matrix.prototype.fillWith = function (num) {\r\n        for(let i = 0, len = this.data.length; i < len; i++) {\r\n            for(let j = 0, len1 = this.data[0].length; j < len1; j++) {\r\n                this.data[i][j] = num;\r\n            }\r\n        }\r\n        return this.data;\r\n    };\r\n\r\n//给矩阵添加新的行 test ok\r\n    Matrix.prototype.addRows = function (count, num = 0) {\r\n        let len = this.data[0].length;\r\n        let array = new Array(len);\r\n\r\n        //新加的行数每一个默认为0\r\n        for (let i = 0; i < len; i++) {\r\n            array[i] = num;\r\n        }\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            this.data.push(array);\r\n        }\r\n        this.row += count; // 添加对应的行数\r\n        return this.data;\r\n    };\r\n\r\n// 给矩阵添加新的列 test ok\r\n    Matrix.prototype.addCol = function (count, num = 0) {\r\n        for (let j = 0;j < count; j++) {\r\n            for (let i = 0, len = this.data.length; i < len; i++) {\r\n                this.data[i].push(num);\r\n            }\r\n        }\r\n        this.col += count; // 添加对应的列数\r\n        return this.data;\r\n    };\r\n\r\n// 删除某行 test ok\r\n    Matrix.prototype.removeRow = function (index) {\r\n        let len = this.data.length;\r\n\r\n        if (index >=0 && index < len) {\r\n            this.data.splice(index-1, 1);\r\n            this.row--;\r\n            return this.data;\r\n        } else {\r\n            return false;\r\n        }\r\n    };\r\n\r\n// 删除某列 test ok\r\n    Matrix.prototype.removeCol = function (index) {\r\n        let len = this.data[0].length;\r\n\r\n        if (index >= 0 && index <= len) {\r\n            for (let i = 0, len1 = this.data.length; i < len1; i++) {\r\n                this.data[i].splice(index-1, 1);\r\n            }\r\n            this.col--;\r\n            return this.data;\r\n        }else{\r\n            return false;\r\n        }\r\n    };\r\n\r\n// 寻找某个数的位置\r\n    Matrix.prototype.find = function (target) {\r\n        for (let i = 0, len1 = this.data.length; i < len1; i++) {\r\n            for (let j = 0, len2 = this.data[0].length; j < len2; j++) {\r\n                if (this.data[i][j] === target) {\r\n                    return [i+1, j+1];\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n\r\n// 寻找某个数的所有位置,在第几行，第几列 ok,\r\n    Matrix.prototype.findAll = function (target) {\r\n        let pos=[];\r\n\r\n        for (let i = 0, len1 = this.data.length; i < len1; i++) {\r\n            for (let j = 0, len2 = this.data[0].length; j < len2; j++) {\r\n                if( this.data[i][j] === target) {\r\n                    pos.push([i+1,j+1]);\r\n                }\r\n            }\r\n        }\r\n        return pos;\r\n    };\r\n\r\n// 找到某类数的个数 ok\r\n    Matrix.prototype.countFor = function (target) {\r\n        let result = this.findAll(target);\r\n        let len = result.length;\r\n        return len;\r\n    };\r\n\r\n// 给某一个区域设置一个特定的数\r\n    Matrix.prototype.fillBlock = function (row1, row2, col1, col2, num) {\r\n        for ( let i = row1; i <= row2; i ++) {\r\n            for ( let j = col1; j <= col2; j++) {\r\n                this.data[i-1][j-1] = num;\r\n            }\r\n        }\r\n        return this.data;\r\n    };\r\n\r\n// 下面封装一个让二维的数据结构移动的函数(向右)\r\n    Matrix.prototype.moveToRight = function (steps) { //test ok\r\n        //steps 是移动的步数\r\n        for ( let j = 0; j < steps; j++) {\r\n            for(let i = 0, len = this.data.length, count = this.data[0].length; i < len; i++) {\r\n                let end = this.data[i].pop();\r\n                this.data[i].splice(0,0,end);\r\n            }\r\n        }\r\n        return this.data;\r\n    };\r\n\r\n// 下面是一个向上移动的函数\r\n    Matrix.prototype.moveToTop = function (steps) { //test ok\r\n        //steps 是移动的步数\r\n        for(let i = 0;i < steps; i++) {\r\n            let start = this.data.shift();\r\n            this.data.push(start);\r\n        }\r\n        return this.data;\r\n    };\r\n\r\n//下面是一个更加一般的数据移动函数\r\n//第一个参数数向右移动的函数，第二个是向顶部移动的函数\r\n    Matrix.prototype.animate = function (right, top){\r\n        if (right < 0) {\r\n            let steps = this.row+right;\r\n            this.moveToRight(steps);\r\n        } else {\r\n            this.moveToRight(right);\r\n        }\r\n\r\n        if ( top < 0) {\r\n            let steps = this.col+top;\r\n            this.moveToTop(steps);\r\n        } else {\r\n            this.moveToTop(top);\r\n        }\r\n    };\r\n\r\n// 获取第几行第几列的值\r\n    Matrix.prototype.get = function (row, col) {\r\n        return this.data[row-1][col-1];\r\n    };\r\n\r\n// 下面是一个区块的数据移动的函数\r\n    Matrix.prototype.blockAnimate = function (row1, col1, row2, col2, right, top){\r\n        // 先获取这个区块的二维数组\r\n        // 先获取这个矩形区域的最小和最大行数和列数\r\n        let minRow = Math.min(row1, row2);\r\n        let maxRow = Math.max(row1, row2);\r\n        let minCol = Math.min(col1, col2);\r\n        let maxCol = Math.max(col1, col2);\r\n\r\n        // 构建一个新的二维数组\r\n        let childRow = maxRow - minRow + 1;\r\n        let childCol = maxCol-minCol + 1;\r\n        let childMatrix = new Matrix(childRow, childCol);\r\n\r\n        // 把对应的数据填进去\r\n        for (let i = 1; i <= childRow; i++) {\r\n            for(let j = 1;j <= childCol; j++) {\r\n                childMatrix.set(j, i, this.get(minRow + i - 1, minCol + j - 1));\r\n            }\r\n        }\r\n        childMatrix.animate(right,top); // 子数据模块移动\r\n\r\n        // 把子数据对应的数据重新放回父级数据结构里面\r\n        for (let i = 1; i <= childRow; i++) {\r\n            for (let j = 1 ;j <= childCol; j++) {\r\n                matrix.set(minRow+i-1, minCol+j-1, childMatrix.get(j, i));\r\n            }\r\n        }\r\n        return this.data;\r\n    };\r\n\r\n\r\n// 下面是一个渲染的函数，便于展示二维数组 ok\r\n    Matrix.prototype.render = function (selector) {\r\n        let dom = document.querySelector(selector);\r\n        let html='';\r\n        for (let i = 0; i < this.row; i++) {\r\n            html += `<div style=\"\r\n                    margin:5px;\r\n                    flex-wrap:nowrap;\r\n                    width: ${this.cols*40};\r\n                    height:15px;\r\n                    \">`;\r\n            for (let j = 0; j < this.col; j++) {\r\n                html += `<span onclick=\"console.log('第${i+1}行，第${j+1}列')\" style=\"\r\n                box-sizing: border-box;\r\n                font-size: 14px;\r\n                width: 30px;\r\n                height:15px;\r\n                display: block;\r\n                float:left;\r\n                \">${this.data[i][j]}</span>`\r\n            }\r\n            html += `</div>`\r\n        }\r\n        dom.innerHTML = html;\r\n    };\r\n\r\n    return Matrix\r\n});\r\n\r\n\r\n"]}